<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
    "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
    "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">

<hibernate-configuration>
    <session-factory>
        <!-- 	property 元素用于配置Hibernate中的属性
            	键:值 
          -->
        <!-- 	hibernate.connection.driver_class : 连接数据库的驱动
        		mysql:com.mysql.jdbc.Driver
        		oracle:oracle.jdbc.driver.OracleDriver
        -->
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>

        <!-- 	hibernate.connection.username : 连接数据库的用户名 -->
        <property name="hibernate.connection.username">scott</property>

        <!-- 	hibernate.connection.password : 连接数据库的密码 -->
        <property name="hibernate.connection.password">root</property>

        <!-- 	hibernate.connection.url : 连接数据库的地址,路径 
        		mysql:   jdbc:mysql://localhost:3306/需要连接的mysql数据库
        		oracle:  jdbc:oracle:thin:@localhost:1521:orcl
        		(jdbc:oracle:thin:@是固定写法,localhost是IP地址,1521是端口号,orcl是数据库实例名[就是oracle service name] )
        -->
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:orcl</property>


        <!-- ======================================================================================= -->


        <!-- 	show_sql: 操作数据库时,会 向控制台打印sql语句,输出到日志以供调试 -->
        <property name="show_sql">true</property>


        <!-- ======================================================================================= -->


        <!-- 	format_sql: 打印sql语句前,会将sql语句先格式化  -->
        <property name="format_sql">true</property>


        <!-- ======================================================================================= -->


        <!-- 	hbm2ddl.auto: 生成表结构的策略配置
             	update(最常用的取值): 如果当前数据库中不存在表结构,那么自动创建表结构. 
				如果存在表结构,并且表结构与实体一致,那么不做修改
				如果存在表结构,并且表结构与实体不一致,那么会修改表结构.会保留原有列.
             	create(很少):无论是否存在表结构.每次启动Hibernate都会重新创建表结构.(数据会丢失)
             	create-drop(极少): 无论是否存在表结构.每次启动Hibernate都会重新创建表结构.每次Hibernate运行结束时,删除表结构.
             	validate(很少):不会自动创建表结构.也不会自动维护表结构.Hibernate只校验表结构. 如果表结构不一致将会抛出异常.
          -->
        <!-- <property name="hbm2ddl.auto">update</property> -->


        <!-- ======================================================================================= -->


        <!-- 	数据库方言配置 ,用于配置hibernate使用的数据库类型
         		mysql:org.hibernate.dialect.MySQLDialect (选择最短的)
         		oracle:org.hibernate.dialect.Oracle10gDialect,用于指定当前数据库类型是Oracle 10g及以上版本
         -->
        <property name="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</property>


        <!-- ======================================================================================= -->


        <!-- 	hibernate.connection.autocommit: 事务自动提交  -->
        <!-- <property name="hibernate.connection.autocommit">true</property> -->


        <!-- ======================================================================================= -->


        <!-- 	将Session与线程绑定=> 只有配置了该配置,才能使用getCurrentSession -->
        <property name="hibernate.current_session_context_class">thread</property>


        <!-- ======================================================================================= -->

		<!-- 	在hibernate.cfg.xml或者是persistence.xml文件下面需要配置javax.persistence.validation.mode属性
			 	javax.persistence.validation.mode默认情况下是auto的,
				就是说如果不设置的话它是会自动去你的classpath下面找一个bean-validation**包,但是找不到，所以beanvalitionFactory错误
		-->
		<property name="javax.persistence.validation.mode">none</property>

        <!-- ======================================================================================= -->


        <!-- 	引入ORM 映射文件 
			  	 填写src之后的路径
         -->
        <mapping resource="com/hibernate/entity/Dept.hbm.xml"/>
        <mapping resource="com/hibernate/entity/Emp.hbm.xml"/>
    </session-factory>
</hibernate-configuration>