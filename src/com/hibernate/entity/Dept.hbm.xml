<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
	<!-- 
		与mybatis一样,定义一个持久化类的信息,name:表示持久化类的全限定名,table:表示数据库中的表名
		dynamic-update="true"作用是只修改发生变化的属性,执行update时没改变的值不变
	-->
	<class name="com.hibernate.entity.Dept" table="DEPT" schema="scott" dynamic-update="true">
		
		<!-- id表示持久化类的OID和数据库中表的主键字段的映射 -->
		<id name="deptNo" column="DEPTNO" type="java.lang.Byte">
			<!-- 
				generator用于指定主键的生成策略 ,class用于指定具体主键生成策略
				还有个param元素,用于传递参数,主键生成策略是assigned 不需要配置该元素
				
				如:
				<generator class="sequence">
					<param name="sequence">序列名</param>
				</generator>
			-->
			<generator class="assigned"></generator>
		</id>
		
		<property name="dName" column="DNAME" type="java.lang.String"></property>
		<property name="loc" column="LOC" type="java.lang.String"></property>
		
		<!-- set集合属性配置,映射员工表多个员工
			 cascade属性:操作dept时 级联 其所关联的对象和表(比如部门表编号改变了,对应的员工表的deptNo字段也会级联更新)
			            all:save,update,delete操作都会级联改变
			            delete:删除时会级联删除,删除部门数据及关联的员工表下属于该部门的记录都会删除
			            save-update:save(),update(),saveOrUpdate()方法调用时会级联改变(保存瞬时状态对象和更新游离状态对象)
			            none:默认,不会改变
			            
			 inverse="false":该表设置该属性表示主动维护级联关系
			   				设置为false时emp员工表部门编号改变时(员工更换部门)sql：因为要关联表之间的关系,所以在保存时的关联代码
			   				
			   				emp.setDept(dept);  此时的sql语句  update emp set job=?,DEPTNO=? ....  where empno=?
			   				dept.getEmps(emp);  此时的sql语句  update emp DEPTNO=? where empno=?
			   				
			  			 这时更新的DEPTNO属性是重复的,所以在inverse属性赋值为true时只会执行上一句sql,就不会有多余的sql了
		-->
		<set name="emps" cascade="all" inverse="true">
			<!-- 与所关联的持久化类相对应的表的外键,比如现在关联的是Emp类,Emp类对应的表emp的外键是deptno字段(这个外键关联dept表) -->
			<key column="DEPTNO"></key>
			<!-- 所关联的持久化类   类型 -->
			<one-to-many class="com.hibernate.entity.Emp"/>
		</set>
		
	</class>
</hibernate-mapping>
    
    